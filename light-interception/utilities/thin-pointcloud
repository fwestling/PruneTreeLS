#!/bin/bash

## thin-pointcloud
## Uses voxelisation to subsample a point cloud at the given voxel size
## It does this without changing the fields, just replacing all points in each voxel with their mean position.

export readonly name=$( basename $0 )
readonly srcpath=/home/fwes7558/src/tree-crops/light-interception

source $( type -p comma-application-util ) || (error "comma not installed")
function errcho { (>&2 echo "$name: $1") }
function error
{
    errcho "error: $1"
    exit 1
}

function go () {
  binary=$1
  fields=$2
  voxel_size=$3
  cleared_fields=`echo $fields | csv-fields clear`

  cat | points-to-voxel-indices --resolution=$voxel_size --binary=$binary --fields=$fields |
    csv-sort --binary=$binary,3ui --fields=$cleared_fields,i,j,k |
    csv-blocks group --binary=$binary,3ui --fields=$cleared_fields,id,id,id |
    csv-shuffle --binary=$binary,4ui --fields=$fields,,,,block -o=$fields,block |
    csv-calc mean --binary=$binary,ui --fields=$fields,block | 
    csv-shuffle --binary=$binary,ui --fields=$fields --output-fields=$fields
  }

function option-description
{
    cat <<eof
--voxel-size=[<size>]; default=0.05; Voxel size at which to thin point cloud
--binary=[<format>]; default=3d; binary field format
--fields=[<fields>]; default=x,y,z; fields of input/output point cloud. Must include x,y,z
eof
}

function usage
{
    cat <<eof

$name thins out a point cloud using a voxelisation method.
Outputs to STDOUT in ASCII format with three fields (elevation, azimuth, irradiance) per line.  Angles in degrees.

usage: $name [options]

options:
$( option-description  | sed 's/^/    /g' )

eof
    exit 1
}

if (( $( comma_options_has --help $@ ) || $( comma_options_has -h $@ ) )) ; then usage ; fi
options=$( option-description | comma-options-to-name-value "$@" ) || error "invalid command line options"
comma_path_value_to_var --prefix="options" <<< "$options"
eval "$( option-description | comma-options-to-name-value "$@" | comma_path_value_mangle )"

set -e # Kill if anything errors out; we don't want it to run everything on bad datasets

go $options_binary $options_fields $options_voxel_size
